[{"/home/dimitar/Code/todo-app/client/src/index.tsx":"1","/home/dimitar/Code/todo-app/client/src/reportWebVitals.ts":"2","/home/dimitar/Code/todo-app/client/src/App.tsx":"3","/home/dimitar/Code/todo-app/client/src/context/userState/authContext.tsx":"4","/home/dimitar/Code/todo-app/client/src/context/globalState.tsx":"5","/home/dimitar/Code/todo-app/client/src/utils/jwtDecode.ts":"6","/home/dimitar/Code/todo-app/client/src/components/Calendar/Calendar.tsx":"7","/home/dimitar/Code/todo-app/client/src/components/TodoForm/TodoForm.tsx":"8","/home/dimitar/Code/todo-app/client/src/components/CircleButton/CircleButton.tsx":"9","/home/dimitar/Code/todo-app/client/src/components/Auth/AuthForm/AuthForm.tsx":"10","/home/dimitar/Code/todo-app/client/src/components/Todos/Todos.tsx":"11","/home/dimitar/Code/todo-app/client/src/context/userState/reducers.tsx":"12","/home/dimitar/Code/todo-app/client/src/context/reducers.tsx":"13","/home/dimitar/Code/todo-app/client/src/components/Todo/Todo.tsx":"14","/home/dimitar/Code/todo-app/client/src/pages/auth/AuthPage.tsx":"15","/home/dimitar/Code/todo-app/client/src/pages/todos/TodosPage.tsx":"16","/home/dimitar/Code/todo-app/client/src/components/Backdrop/Backdrop.tsx":"17","/home/dimitar/Code/todo-app/client/src/components/Modal/Modal.tsx":"18","/home/dimitar/Code/todo-app/client/src/components/IconButton/IconButton.tsx":"19","/home/dimitar/Code/todo-app/client/src/components/Checkbox/Checkbox.tsx":"20","/home/dimitar/Code/todo-app/client/src/components/SearchBar/SearchBar.tsx":"21"},{"size":601,"mtime":1629908403849,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1624725622477,"results":"24","hashOfConfig":"23"},{"size":2488,"mtime":1629908231612,"results":"25","hashOfConfig":"23"},{"size":4320,"mtime":1628160896964,"results":"26","hashOfConfig":"23"},{"size":3672,"mtime":1629889246456,"results":"27","hashOfConfig":"23"},{"size":250,"mtime":1624725771541,"results":"28","hashOfConfig":"23"},{"size":895,"mtime":1629908378993,"results":"29","hashOfConfig":"23"},{"size":3722,"mtime":1628159075888,"results":"30","hashOfConfig":"23"},{"size":306,"mtime":1627732522599,"results":"31","hashOfConfig":"23"},{"size":2899,"mtime":1628162558886,"results":"32","hashOfConfig":"23"},{"size":615,"mtime":1627858788223,"results":"33","hashOfConfig":"23"},{"size":2211,"mtime":1628160732403,"results":"34","hashOfConfig":"23"},{"size":1719,"mtime":1627745521678,"results":"35","hashOfConfig":"23"},{"size":2048,"mtime":1627859298222,"results":"36","hashOfConfig":"23"},{"size":250,"mtime":1625582079032,"results":"37","hashOfConfig":"23"},{"size":319,"mtime":1625586217950,"results":"38","hashOfConfig":"23"},{"size":293,"mtime":1625589534614,"results":"39","hashOfConfig":"23"},{"size":832,"mtime":1625600736751,"results":"40","hashOfConfig":"23"},{"size":1224,"mtime":1627847103988,"results":"41","hashOfConfig":"23"},{"size":726,"mtime":1627735457043,"results":"42","hashOfConfig":"23"},{"size":1620,"mtime":1628157567194,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"leazwg",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},"/home/dimitar/Code/todo-app/client/src/index.tsx",[],"/home/dimitar/Code/todo-app/client/src/reportWebVitals.ts",[],["100","101"],"/home/dimitar/Code/todo-app/client/src/App.tsx",["102","103","104"],"/home/dimitar/Code/todo-app/client/src/context/userState/authContext.tsx",["105"],"import axios, { AxiosResponse } from 'axios';\nimport React, { useReducer, useContext, useEffect } from 'react';\nimport IUser from '../../models/User.interface';\nimport authReducer from './reducers';\nimport decodeToken from '../../utils/jwtDecode';\nimport JWT from '../../models/JWT.interface';\n\ntype ContextType = {\n    user: IUser | null;\n    token: string | null;\n    isAuthenticated: boolean;\n    isLoaading: boolean;\n    hasError: boolean;\n    signUp: (authInfo: AuthInfo) => void;\n    signIn: (authInfo: AuthInfo) => void;\n    signOut: () => void;\n    checkToken: () => void;\n};\n\n\ntype AuthInfo = {\n    username: string;\n    password: string;\n    email?: string;\n};\n\ntype Props = {\n    children: React.ReactNode;\n};\n\nconst AuthContext = React.createContext<ContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: Props) => {\n    const initialState = {\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        hasError: false,\n    };\n\n    useEffect(() => {\n        const tokenObj = localStorage.getItem('token');\n        let localToken = undefined;\n\n        if (tokenObj) {\n            localToken = JSON.parse(tokenObj);\n        }\n\n        if (localToken) {\n            const token: JWT | null = decodeToken(localToken);\n\n\n            if (Date.now() >= token!.exp * 1000) {\n                dispatch({ type: 'SIGNOUT' });\n            } else {\n                dispatch({ type: 'SIGNIN', payload: { user: token!.user, token: localToken }});\n            }\n        }\n    }, []);\n\n    const [authState, dispatch] = useReducer(authReducer, initialState);\n\n    const checkToken = (): void => {\n        const localeToken = localStorage.getItem('token');\n\n        if (localeToken) {\n            const token = decodeToken(localeToken);\n        }\n    }\n\n    const signUp = (authInfo: AuthInfo): void => {\n        dispatch({ type: 'SET_LOADING' });\n\n        axios.post('/api/auth/signUp', authInfo)\n            .then((response: AxiosResponse<{ token: string}>) => {\n                const token = response.data.token;\n                const jwtDecoded: JWT | null = decodeToken(token);\n                const user: IUser = jwtDecoded!.user;\n\n                dispatch({ type: 'SIGNUP', payload: { user: user, token: token } });\n                dispatch({ type: 'SET_LOADING' });\n\n\n                // axios.get('/api/auth/verify', { headers: {\"Authorization\" : `Bearer ${token}`} })\n                //     .then((response: AxiosResponse) => {\n                //     })\n            })\n            .catch((err) => {\n                dispatch({ type: 'SET_LOADING' });\n                dispatch({ type: 'SET_ERROR' });\n                console.log(err);\n            })\n    };\n\n    const signIn = (authInfo: AuthInfo): void => {\n        dispatch({ type: 'SET_LOADING' });\n\n        axios.post('/api/auth/signIn', authInfo)\n            .then((response: AxiosResponse<{ token: string}>) => {\n                const token = response.data.token;\n                const jwtDecoded: JWT | null = decodeToken(token);\n                const user: IUser = jwtDecoded!.user;\n        \n                dispatch({ type: 'SIGNIN', payload: { user: user, token: token } });\n                dispatch({ type: 'SET_LOADING' });\n\n                // axios.get('/api/auth/verify', { headers: {\"Authorization\" : `Bearer ${token}`} })\n                //     .then((response: AxiosResponse) => {\n                //     })\n            })\n            .catch((err) => {\n                dispatch({ type: 'SET_LOADING' });\n                dispatch({ type: 'SET_ERROR' });\n                console.log(err);\n            });\n    };\n    \n    const signOut = (): void => {\n        dispatch({ type: 'SIGNOUT' });\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user: authState.user,\n                token: authState.token,\n                isAuthenticated: authState.isAuthenticated,\n                isLoaading: false,\n                hasError: false,\n                signUp: signUp,\n                signIn: signIn,\n                signOut: signOut,\n                checkToken: checkToken\n            }}\n        >\n        {children}\n        </AuthContext.Provider>\n    )\n};\n\nexport const useAuthContext = () => useContext(AuthContext);\nexport default AuthProvider;\n\n","/home/dimitar/Code/todo-app/client/src/context/globalState.tsx",["106"],"import axios, { AxiosResponse } from 'axios';\nimport React, { useContext, useEffect, useReducer } from 'react'\nimport ITodo from '../models/Todo.interface';\nimport Todo from '../models/Todo.interface';\nimport { FilterType } from '../models/types';\nimport { todosReducer } from './reducers';\nimport { useAuthContext } from './userState/authContext';\n\ntype ContextType = {\n    todos: Todo[];\n    addTodo: (todo: ITodo) => void;\n    removeTodo: (todoId: number) => void;\n    updateTodo: (todo: ITodo) => void;\n    filterAll: (filter?: FilterType, filterValue?: string | boolean) => void;\n    getAll: (filter?: string) => void;\n};\n\ntype Props = {\n    children: React.ReactNode;\n};\n\nconst TodosContext = React.createContext<ContextType | undefined>(undefined);\n\nexport const TodosProvider = ({ children }: Props) => {\n    const [todosState, dispatch] = useReducer(todosReducer, []);\n    const {token} = useAuthContext()!;\n    \n    useEffect(() => {\n        axios.get('/api/todos', { headers: {\"Authorization\" : `Bearer ${token}`} })\n          .then((response: AxiosResponse<Todo[]>) => {\n            dispatch({ type: 'SET_INITIAL_STATE', initialState: response.data});\n          })\n          .catch((err) => {\n            console.log(err);\n        });\n          \n    }, []);\n\n    const addTodo = (todo: ITodo): void => {\n        axios.post('/api/todos', todo, { headers: {\"Authorization\" : `Bearer ${token}`} })\n            .then((response: AxiosResponse<ITodo>) => {\n                dispatch({ type: 'ADD_ITEM', item: response.data});\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        };\n\n    const removeTodo = (todoId: number): void => {\n        axios.delete(`/api/todos/${todoId}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\n            .then((response: AxiosResponse) => {\n                dispatch({ type: 'REMOVE_ITEM', itemId: todoId});\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    const updateTodo = (todo: ITodo): void => {\n        axios.put(`/api/todos/${todo.id}`, todo, { headers: {\"Authorization\" : `Bearer ${token}`} })\n            .then((response: AxiosResponse) => {\n                dispatch({ type: 'UPDATE_ITEM', updatedItem: response.data});\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    const filterAll = (filter?: FilterType, filterValue?: string | boolean): void => {\n        axios.get(`/api/todos?${filter ? filter : ''}${filterValue ? `=${filterValue}` : ''}`, { headers: {\"Authorization\" : `Bearer ${token}`} })\n            .then((response: AxiosResponse) => {\n                dispatch({type: 'SET_TODOS', todos: response.data});\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    const getAll = (filter?: string): void => {\n        axios.get('/api/todos', { headers: {\"Authorization\" : `Bearer ${token}`} })\n            .then((response: AxiosResponse<ITodo[]>) => {\n                dispatch({type: 'SET_TODOS', todos: response.data});\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        };\n\n    return (\n        <TodosContext.Provider\n            value={{\n                todos: todosState,\n                addTodo: addTodo,\n                removeTodo: removeTodo,\n                updateTodo: updateTodo,\n                filterAll: filterAll,\n                getAll: getAll\n            }}\n        >\n            {children}\n        </TodosContext.Provider>\n    )\n};\n\nexport const useTodosContext = () => useContext(TodosContext);\n\nexport default TodosProvider;\n\n","/home/dimitar/Code/todo-app/client/src/utils/jwtDecode.ts",[],"/home/dimitar/Code/todo-app/client/src/components/Calendar/Calendar.tsx",["107"],"/home/dimitar/Code/todo-app/client/src/components/TodoForm/TodoForm.tsx",["108","109","110"],"import React, { ChangeEvent, FormEvent, useEffect, useRef, useState } from 'react';\nimport { useTodosContext } from '../../context/globalState';\nimport ITodo from '../../models/Todo.interface';\nimport CircleButton from '../CircleButton/CircleButton';\nimport './TodoForm.css';\nimport { useParams, useHistory } from 'react-router-dom';\nimport RadioButton from '../Checkbox/Checkbox';\nimport IconButton from '../IconButton/IconButton';\n\ntype AppProps = {\n    todo?: ITodo,\n    type: 'create' | 'edit'\n}\n\ntype AppParams = {\n    id: string\n}\n\nconst TodoForm = ({ todo, type }: AppProps ) => {\n    const { todos, addTodo, updateTodo } = useTodosContext()!;\n\n    const [ dueDate, setDueDate ] = useState<boolean>(false);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [formData, setFormData] = useState<ITodo>(todo || {\n        title: '',\n        body: '',\n        pinned: false,\n        section: 'private',\n    });\n\n    let { id } = useParams<AppParams>();\n    let history = useHistory<History>();\n\n    useEffect(() => {\n        if(type === 'edit') {\n            const todo = todos.find(todo => todo.id === Number(id));\n\n            todo && (setFormData(todo));\n            todo?.dueDate && setDueDate(true)\n        }\n    }, [])\n\n    const handleInputChange = (event: React.FormEvent<HTMLSelectElement | HTMLInputElement | HTMLTextAreaElement>, type: 'section' | 'title' | 'body' | 'dueDate'): void => {\n        let value: string | Date = event.currentTarget.value;\n        \n        setFormData(prevState => {\n            return {\n                ...prevState,\n                [type]: value\n            }\n        })\n    }\n\n    const handleFormSubmit = (event: FormEvent): void => {\n        event.preventDefault();\n\n        if (formData?.title) {\n            const todo: ITodo = {\n                ...formData,\n                completed: false\n            };\n\n            if (type === 'create') {\n                addTodo(todo);\n            } else {\n                updateTodo(todo);\n            }\n    \n            setFormData({\n                title: '',\n                body: '',\n                pinned: false,\n            });\n\n            history.push('/');\n\n        } else {\n            inputRef.current?.focus();\n        }\n    }\n\n    return (\n        <form onSubmit={handleFormSubmit} \n        className=\"TodoForm\">\n            <select value={formData.section} onChange={(event: React.FormEvent<HTMLSelectElement>) => handleInputChange(event, 'section')}>\n                <option value=\"private\">Private</option>\n                <option value=\"work\">Work</option>\n            </select>\n            \n            <input\n                ref={inputRef}\n                type=\"text\"\n                placeholder=\"Todo title\"\n                onChange={(event: React.FormEvent<HTMLInputElement>) => handleInputChange(event, 'title')}\n                value={formData?.title}\n            />\n\n            <textarea\n                name=\"\"\n                id=\"\"\n                placeholder=\"Todo body\"\n                onChange={(event: React.FormEvent<HTMLTextAreaElement>) => handleInputChange(event, 'body')}\n                value={formData?.body}\n            ></textarea>\n\n            <fieldset>\n                <RadioButton id=\"dueDate\" label=\"Add due date?\" callback={() => {setDueDate(!dueDate)}} checked={dueDate}></RadioButton>\n                {dueDate && (<input type=\"date\" value={formData.dueDate || ''} onChange={(event: React.FormEvent<HTMLInputElement>) => handleInputChange(event, 'dueDate')} />)}\n            </fieldset>\n\n            <IconButton className=\"TodoFormButton\" callback={() => handleFormSubmit} type=\"FaPlusCircle\" size=\"3em\" color=\"#2bd485\" />\n        </form>\n    )\n}\n\nexport default TodoForm;","/home/dimitar/Code/todo-app/client/src/components/CircleButton/CircleButton.tsx",[],["111","112"],"/home/dimitar/Code/todo-app/client/src/components/Auth/AuthForm/AuthForm.tsx",["113"],"import React, { ChangeEvent, FormEvent, useRef, useState } from 'react';\nimport { useAuthContext } from '../../../context/userState/authContext';\nimport './AuthForm.css';\nimport { Link } from 'react-router-dom';\n\ntype AuthInfo = {\n    username: string;\n    password: string;\n    email?: string;\n}\n\ntype AuthFormProps = {\n    type: 'signUp' | 'signIn'\n}\n\nconst AuthForm = ({ type }: AuthFormProps) => {\n    const usernameRef = useRef<HTMLInputElement>(null);\n    const passwordRef = useRef<HTMLInputElement>(null);\n\n    const [authInfo, setAuthInfo] = useState<AuthInfo>({\n        username: '',\n        password: ''\n    });\n\n    const { signIn, signUp, isLoaading, hasError } = useAuthContext()!;\n    \n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\n        setAuthInfo(prevState => {\n            return {\n                ...prevState,\n                [event.target.id]: event.target.value\n            }\n        })\n    };\n\n    const handleFormSubmit = (event: FormEvent): void => {\n        event.preventDefault();\n\n        if (type === 'signIn') {\n            signIn(authInfo);\n        } else if (type === 'signUp') {\n            signUp(authInfo);\n        }\n    };\n\n    return (\n        <div className=\"AuthFormContainer\">\n            <form onSubmit={handleFormSubmit} className=\"AuthForm\">\n            <h1>{type}</h1>\n            {type === 'signUp' && (\n                <input\n                ref={usernameRef}\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Email\"\n                onChange={(event: ChangeEvent<HTMLInputElement>) => handleInputChange(event)}\n                value={authInfo.email}\n                disabled={isLoaading}\n                required\n            />\n            )}\n            <input\n                ref={usernameRef}\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Username\"\n                onChange={(event: ChangeEvent<HTMLInputElement>) => handleInputChange(event)}\n                value={authInfo.username}\n                disabled={isLoaading}\n                required\n            />\n\n            <input\n                ref={passwordRef}\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={(event: ChangeEvent<HTMLInputElement>) => handleInputChange(event)}\n                value={authInfo.password}\n                disabled={isLoaading}\n                required\n            />\n\n            <span className=\"FormMessage\"></span>\n\n            <button disabled={isLoaading}>{type}</button>\n            </form>\n\n            {type === 'signIn' ?\n                <Link to=\"/auth/signup\">No account? Sign up here.</Link>\n                : \n                <Link to=\"/auth/signin\">Already have an account? Sign in here.</Link>\n            }\n        </div>\n    )\n}\n\nexport default AuthForm;\n","/home/dimitar/Code/todo-app/client/src/components/Todos/Todos.tsx",["114"],"import React from 'react';\nimport { useTodosContext } from '../../context/globalState';\nimport ITodo from '../../models/Todo.interface';\nimport Todo from '../Todo/Todo';\nimport './Todos.css';\n\ntype TodoSort = 'pinned' | 'completed';\n\nconst Todos = () => {\n    const { todos } = useTodosContext()!;\n\n  const todoElements: Array<JSX.Element> = todos.map((todo: ITodo) => {\n    return <Todo todo={todo} key={todo.id} />\n  });\n\n  return (\n    <div className=\"Todos\">\n      <ul className=\"TodosList\">\n          {todoElements.length ? todoElements : <h2>Such empty</h2>}\n     </ul>\n    </div>\n  )\n}\n\nexport default Todos;","/home/dimitar/Code/todo-app/client/src/context/userState/reducers.tsx",[],"/home/dimitar/Code/todo-app/client/src/context/reducers.tsx",["115","116","117","118"],"import ITodo from \"../models/Todo.interface\";\n\ntype ReducerAction =\n    | { type: 'SET_INITIAL_STATE', initialState: ITodo[] }\n    | { type: 'ADD_ITEM', item: ITodo }\n    | { type: 'REMOVE_ITEM', itemId: number }\n    | { type: 'UPDATE_ITEM', updatedItem: ITodo }\n    | { type: 'SET_TODOS', todos: ITodo[] };\n\nconst addTodo = (todo: ITodo, todos: ITodo[]): ITodo[] => {\n    return [...todos, todo];\n};\n\nconst removeTodo = (todoId: number, todos: ITodo[]): ITodo[] => {\n    const updatedTodos = [...todos];\n    const removedTodoIndex = updatedTodos.findIndex((todo: ITodo) => {\n        return todo.id === todoId;\n    });\n\n    updatedTodos.splice(removedTodoIndex, 1);\n\n    return updatedTodos;\n};\n\nconst updateTodo = (updatedTodo: ITodo, todos: ITodo[]): ITodo[] => {\n    const updatedTodos = [...todos];\n    const removedTodoIndex = updatedTodos.findIndex((todo: ITodo) => {\n        return todo.id === updatedTodo.id;\n    });\n\n    updatedTodos[removedTodoIndex] = {...updatedTodo};\n    return updatedTodos;\n}\n\nconst setTodos = (newTodos: ITodo[], todos: ITodo[]): ITodo[] => {\n    return newTodos;\n}\n\nexport const todosReducer = (state: ITodo[], action: ReducerAction): ITodo[] => {\n    switch (action.type) {\n        case 'SET_INITIAL_STATE': {\n            return action.initialState;\n        };\n\n        case 'ADD_ITEM': {\n            return addTodo(action.item, state);\n        };\n\n        case 'REMOVE_ITEM': {\n            return removeTodo(action.itemId, state);\n        };\n\n        case 'UPDATE_ITEM': {\n            return updateTodo(action.updatedItem, state);\n        };\n\n        case 'SET_TODOS': {\n            return setTodos(action.todos, state);\n        }\n\n        default:\n            return state;\n    }\n};","/home/dimitar/Code/todo-app/client/src/components/Todo/Todo.tsx",[],"/home/dimitar/Code/todo-app/client/src/pages/auth/AuthPage.tsx",[],["119","120"],"/home/dimitar/Code/todo-app/client/src/pages/todos/TodosPage.tsx",["121","122","123"],"/home/dimitar/Code/todo-app/client/src/components/Backdrop/Backdrop.tsx",[],["124","125"],"/home/dimitar/Code/todo-app/client/src/components/Modal/Modal.tsx",["126","127"],"import React, { SyntheticEvent, useState } from 'react';\nimport Backdrop from '../Backdrop/Backdrop';\nimport DeleteButton from '../DeleteButton/DeleteButton';\nimport './Modal.scss';\n\ntype AppProps = {\n    onClose: () => void,\n    children: JSX.Element[]\n}\n\nconst Modal = ({onClose, children}: AppProps) => {\n\n    const [isOpen, setIsOpen] = useState(true);\n\n    const handleClose = (): void => {\n        setIsOpen(!isOpen);\n\n        onClose();\n    }\n\n    return (\n        <div className={`Backdrop Open-${isOpen}`} onClick={handleClose}>\n            <DeleteButton className=\"ModalDeleteButton\" type=\"FaRegWindowClose\" callback={handleClose}></DeleteButton>\n            <div className=\"Modal\" onClick={(event) => {event.stopPropagation()}}>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;\n",["128","129"],"/home/dimitar/Code/todo-app/client/src/components/IconButton/IconButton.tsx",[],"/home/dimitar/Code/todo-app/client/src/components/Checkbox/Checkbox.tsx",[],["130","131"],"/home/dimitar/Code/todo-app/client/src/components/SearchBar/SearchBar.tsx",["132","133"],"import React, { ChangeEvent, useState, useEffect, useRef } from 'react';\nimport { useTodosContext } from '../../context/globalState';\nimport './SearchBar.css';\n\nconst SearchBar = () => {\n    const { filterAll, getAll } = useTodosContext()!;\n\n    const isInitialMount = useRef(true);\n    const [queryString, setQueryString] = useState('');\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\n        const queryString = event.currentTarget.value.toLowerCase().replaceAll(/\\s/g,'')\n        setQueryString(queryString);\n    }\n\n    //this should run only on update cycles\n    useEffect(() => {\n        if (isInitialMount.current) {\n            isInitialMount.current = false;\n        } else {\n            const queryTimeOut = setTimeout(() => {\n                filterAll('queryString', queryString);\n            }, 300)\n    \n            return () => {\n                clearTimeout(queryTimeOut);\n            }\n        }\n    }, [queryString])\n\n    return (\n        <section className=\"SearchBar\">\n            <input type=\"text\" placeholder=\"Search\" onChange={(event: ChangeEvent<HTMLInputElement>) => handleInputChange(event)} />\n            <ul>\n                <li onClick={() => {filterAll()}}>All</li>\n                <li onClick={() => {filterAll('completed', true)}}>Completed</li>\n                <li onClick={() => {filterAll('pinned', true)}}>Pinned</li>\n                <li onClick={() => {filterAll('section', 'private')}}>Private</li>\n                <li onClick={() => {filterAll('section', 'work')}}>Work</li>\n            </ul>\n        </section>\n    )\n}\n\nexport default SearchBar;\n",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":2,"column":17,"nodeType":"140","messageId":"141","endLine":2,"endColumn":25},{"ruleId":"138","severity":1,"message":"142","line":3,"column":8,"nodeType":"140","messageId":"141","endLine":3,"endColumn":13},{"ruleId":"138","severity":1,"message":"143","line":12,"column":8,"nodeType":"140","messageId":"141","endLine":12,"endColumn":16},{"ruleId":"138","severity":1,"message":"144","line":68,"column":19,"nodeType":"140","messageId":"141","endLine":68,"endColumn":24},{"ruleId":"145","severity":1,"message":"146","line":37,"column":8,"nodeType":"147","endLine":37,"endColumn":10,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":8,"column":18,"nodeType":"140","messageId":"141","endLine":8,"endColumn":25},{"ruleId":"138","severity":1,"message":"150","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":28},{"ruleId":"138","severity":1,"message":"151","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":20},{"ruleId":"145","severity":1,"message":"152","line":42,"column":8,"nodeType":"147","endLine":42,"endColumn":10,"suggestions":"153"},{"ruleId":"134","replacedBy":"154"},{"ruleId":"136","replacedBy":"155"},{"ruleId":"138","severity":1,"message":"156","line":25,"column":41,"nodeType":"140","messageId":"141","endLine":25,"endColumn":49},{"ruleId":"138","severity":1,"message":"157","line":7,"column":6,"nodeType":"140","messageId":"141","endLine":7,"endColumn":14},{"ruleId":"158","severity":1,"message":"159","line":41,"column":35,"nodeType":"160","messageId":"161","endLine":43,"endColumn":10},{"ruleId":"158","severity":1,"message":"159","line":45,"column":26,"nodeType":"160","messageId":"161","endLine":47,"endColumn":10},{"ruleId":"158","severity":1,"message":"159","line":49,"column":29,"nodeType":"160","messageId":"161","endLine":51,"endColumn":10},{"ruleId":"158","severity":1,"message":"159","line":53,"column":29,"nodeType":"160","messageId":"161","endLine":55,"endColumn":10},{"ruleId":"134","replacedBy":"162"},{"ruleId":"136","replacedBy":"163"},{"ruleId":"138","severity":1,"message":"164","line":3,"column":10,"nodeType":"140","messageId":"141","endLine":3,"endColumn":15},{"ruleId":"138","severity":1,"message":"165","line":6,"column":13,"nodeType":"140","messageId":"141","endLine":6,"endColumn":17},{"ruleId":"138","severity":1,"message":"166","line":6,"column":19,"nodeType":"140","messageId":"141","endLine":6,"endColumn":22},{"ruleId":"134","replacedBy":"167"},{"ruleId":"136","replacedBy":"168"},{"ruleId":"138","severity":1,"message":"169","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":31},{"ruleId":"138","severity":1,"message":"170","line":2,"column":8,"nodeType":"140","messageId":"141","endLine":2,"endColumn":16},{"ruleId":"134","replacedBy":"171"},{"ruleId":"136","replacedBy":"172"},{"ruleId":"134","replacedBy":"173"},{"ruleId":"136","replacedBy":"174"},{"ruleId":"138","severity":1,"message":"175","line":6,"column":24,"nodeType":"140","messageId":"141","endLine":6,"endColumn":30},{"ruleId":"145","severity":1,"message":"176","line":29,"column":8,"nodeType":"147","endLine":29,"endColumn":21,"suggestions":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ITodo' is defined but never used.","'AuthPage' is defined but never used.","'token' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["180"],"'setDate' is assigned a value but never used.","'ChangeEvent' is defined but never used.","'CircleButton' is defined but never used.","React Hook useEffect has missing dependencies: 'id', 'todos', and 'type'. Either include them or remove the dependency array.",["181"],["178"],["179"],"'hasError' is assigned a value but never used.","'TodoSort' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["178"],["179"],"'Route' is defined but never used.","'path' is assigned a value but never used.","'url' is assigned a value but never used.",["178"],["179"],"'SyntheticEvent' is defined but never used.","'Backdrop' is defined but never used.",["178"],["179"],["178"],["179"],"'getAll' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'filterAll'. Either include it or remove the dependency array.",["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [token]",{"range":"189","text":"190"},"Update the dependencies array to be: [id, todos, type]",{"range":"191","text":"192"},"Update the dependencies array to be: [filterAll, queryString]",{"range":"193","text":"194"},[1265,1267],"[token]",[1236,1238],"[id, todos, type]",[952,965],"[filterAll, queryString]"]